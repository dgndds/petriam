{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { DivOverlay, Popup } from 'react-leaflet';\nimport { transformProps } from \"./utils/transformProps\";\n\nfunction localTransformProps(_ref) {\n  var style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return _objectSpread({\n    style: style\n  }, transformProps(props));\n}\n\nvar ExpoCallout = function (_React$Component) {\n  _inherits(ExpoCallout, _React$Component);\n\n  var _super = _createSuper(ExpoCallout);\n\n  function ExpoCallout() {\n    _classCallCheck(this, ExpoCallout);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExpoCallout, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.ref.setStyleIfChanged(this.props, localTransformProps(props));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var props = localTransformProps(this.props);\n      return React.createElement(Popup, _extends({\n        ref: function ref(_ref2) {\n          return _this.ref = _ref2;\n        }\n      }, props));\n    }\n  }]);\n\n  return ExpoCallout;\n}(React.Component);\n\nexport { ExpoCallout as default };","map":{"version":3,"sources":["/Users/kiraci/Desktop/improvement/petriam/frontend/petriam-frontend/node_modules/react-native-maps/lib/web/Leaflet/Callout.js"],"names":["React","DivOverlay","Popup","transformProps","localTransformProps","style","props","ExpoCallout","ref","setStyleIfChanged","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,eAAlC;AAEA,SAASC,cAAT;;AAEA,SAASC,mBAAT,OAAkD;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,MAATC,KAAS;;AAChD;AACED,IAAAA,KAAK,EAALA;AADF,KAEKF,cAAc,CAACG,KAAD,CAFnB;AAID;;IAEoBC,W;;;;;;;;;;;;;WACnB,wBAAeD,KAAf,EAAsB;AACpB,WAAKE,GAAL,CAASC,iBAAT,CAA2B,KAAKH,KAAhC,EAAuCF,mBAAmB,CAACE,KAAD,CAA1D;AACD;;;WAED,kBAAS;AAAA;;AACP,UAAMA,KAAK,GAAGF,mBAAmB,CAAC,KAAKE,KAAN,CAAjC;AACA,aAAO,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAE,aAAAE,KAAG;AAAA,iBAAK,KAAI,CAACA,GAAL,GAAWA,KAAhB;AAAA;AAAf,SAAyCF,KAAzC,EAAP;AACD;;;;EARsCN,KAAK,CAACU,S;;SAA1BH,W","sourcesContent":["import * as React from 'react';\nimport { DivOverlay, Popup } from 'react-leaflet';\n\nimport { transformProps } from './utils/transformProps';\n\nfunction localTransformProps({ style, ...props }) {\n  return {\n    style,\n    ...transformProps(props),\n  };\n}\n\nexport default class ExpoCallout extends React.Component {\n  setNativeProps(props) {\n    this.ref.setStyleIfChanged(this.props, localTransformProps(props));\n  }\n\n  render() {\n    const props = localTransformProps(this.props);\n    return <Popup ref={ref => (this.ref = ref)} {...props} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}