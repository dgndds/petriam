{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { TileLayer } from 'react-leaflet';\nimport createLogger from \"../utils/createLogger\";\nimport { transformProps } from \"./utils/transformProps\";\nvar logger = createLogger('Leaflet', 'LocalTile');\n\nfunction localTransformProps(props) {\n  return _objectSpread(_objectSpread({}, transformProps(props)), {}, {\n    url: props.urlTemplate,\n    maximumZ: props.zIndex\n  });\n}\n\nvar ExpoLocalTile = function (_React$Component) {\n  _inherits(ExpoLocalTile, _React$Component);\n\n  var _super = _createSuper(ExpoLocalTile);\n\n  function ExpoLocalTile() {\n    _classCallCheck(this, ExpoLocalTile);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExpoLocalTile, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.ref.setStyleIfChanged(this.props, localTransformProps(props));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var props = localTransformProps(this.props);\n      return React.createElement(TileLayer, _extends({\n        ref: function ref(_ref) {\n          return _this.ref = _ref;\n        }\n      }, props));\n    }\n  }]);\n\n  return ExpoLocalTile;\n}(React.Component);\n\nexport { ExpoLocalTile as default };","map":{"version":3,"sources":["/Users/kiraci/Desktop/improvement/petriam/frontend/petriam-frontend/node_modules/react-native-maps/lib/web/Leaflet/LocalTile.js"],"names":["React","TileLayer","createLogger","transformProps","logger","localTransformProps","props","url","urlTemplate","maximumZ","zIndex","ExpoLocalTile","ref","setStyleIfChanged","Component"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEA,OAAOC,YAAP;AACA,SAASC,cAAT;AAEA,IAAMC,MAAM,GAAGF,YAAY,CAAC,SAAD,EAAY,WAAZ,CAA3B;;AAEA,SAASG,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,yCACKH,cAAc,CAACG,KAAD,CADnB;AAEEC,IAAAA,GAAG,EAAED,KAAK,CAACE,WAFb;AAGEC,IAAAA,QAAQ,EAAEH,KAAK,CAACI;AAHlB;AAKD;;IAEoBC,a;;;;;;;;;;;;;WACnB,wBAAeL,KAAf,EAAsB;AACpB,WAAKM,GAAL,CAASC,iBAAT,CAA2B,KAAKP,KAAhC,EAAuCD,mBAAmB,CAACC,KAAD,CAA1D;AACD;;;WAED,kBAAS;AAAA;;AACP,UAAMA,KAAK,GAAGD,mBAAmB,CAAC,KAAKC,KAAN,CAAjC;AAEA,aAAO,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAE,aAAAM,IAAG;AAAA,iBAAK,KAAI,CAACA,GAAL,GAAWA,IAAhB;AAAA;AAAnB,SAA6CN,KAA7C,EAAP;AACD;;;;EATwCN,KAAK,CAACc,S;;SAA5BH,a","sourcesContent":["import * as React from 'react';\nimport { TileLayer } from 'react-leaflet';\n\nimport createLogger from '../utils/createLogger';\nimport { transformProps } from './utils/transformProps';\n\nconst logger = createLogger('Leaflet', 'LocalTile');\n\nfunction localTransformProps(props) {\n  return {\n    ...transformProps(props),\n    url: props.urlTemplate,\n    maximumZ: props.zIndex,\n  };\n}\n\nexport default class ExpoLocalTile extends React.Component {\n  setNativeProps(props) {\n    this.ref.setStyleIfChanged(this.props, localTransformProps(props));\n  }\n\n  render() {\n    const props = localTransformProps(this.props);\n\n    return <TileLayer ref={ref => (this.ref = ref)} {...props} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}