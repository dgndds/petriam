{"ast":null,"code":"export function onloadCSS(ss, callback) {\n  var called;\n\n  function newcb() {\n    if (!called && callback) {\n      called = true;\n      callback.call(ss);\n    }\n  }\n\n  if (ss.addEventListener) {\n    ss.addEventListener('load', newcb);\n  }\n\n  if (ss.attachEvent) {\n    ss.attachEvent('onload', newcb);\n  }\n\n  if ('isApplicationInstalled' in navigator && 'onloadcssdefined' in ss) {\n    ss.onloadcssdefined(newcb);\n  }\n}\nexport default function (href, before, media, attributes) {\n  var doc = window.document;\n  var ss = doc.createElement('link');\n  var ref;\n\n  if (before) {\n    ref = before;\n  } else {\n    var refs = (doc.body || doc.getElementsByTagName('head')[0]).childNodes;\n    ref = refs[refs.length - 1];\n  }\n\n  var sheets = doc.styleSheets;\n\n  if (attributes) {\n    for (var attributeName in attributes) {\n      if (attributeName in attributes) {\n        ss.setAttribute(attributeName, attributes[attributeName]);\n      }\n    }\n  }\n\n  ss.rel = 'stylesheet';\n  ss.href = href;\n  ss.media = 'only x';\n\n  function ready(cb) {\n    if (doc.body) {\n      return cb();\n    }\n\n    setTimeout(function () {\n      ready(cb);\n    });\n  }\n\n  ready(function () {\n    ref.parentNode.insertBefore(ss, before ? ref : ref.nextSibling);\n  });\n\n  function onloadcssdefined(cb) {\n    var resolvedHref = ss.href;\n    var i = sheets.length;\n\n    while (i--) {\n      if (sheets[i].href === resolvedHref) {\n        return cb();\n      }\n    }\n\n    setTimeout(function () {\n      onloadcssdefined(cb);\n    });\n  }\n\n  function loadCB() {\n    if (ss.addEventListener) {\n      ss.removeEventListener(\"load\", loadCB);\n    }\n\n    ss.media = media || \"all\";\n  }\n\n  if (ss.addEventListener) {\n    ss.addEventListener(\"load\", loadCB);\n  }\n\n  ss.onloadcssdefined = onloadcssdefined;\n  onloadcssdefined(loadCB);\n  return ss;\n}","map":{"version":3,"sources":["/Users/kiraci/Desktop/improvement/petriam/frontend/petriam-frontend/node_modules/react-native-maps/lib/web/Leaflet/utils/autoLink.js"],"names":["onloadCSS","ss","callback","called","newcb","call","addEventListener","attachEvent","navigator","onloadcssdefined","href","before","media","attributes","doc","window","document","createElement","ref","refs","body","getElementsByTagName","childNodes","length","sheets","styleSheets","attributeName","setAttribute","rel","ready","cb","setTimeout","parentNode","insertBefore","nextSibling","resolvedHref","i","loadCB","removeEventListener"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,EAAnB,EAAuBC,QAAvB,EAAiC;AACtC,MAAIC,MAAJ;;AACA,WAASC,KAAT,GAAiB;AACf,QAAI,CAACD,MAAD,IAAWD,QAAf,EAAyB;AACvBC,MAAAA,MAAM,GAAG,IAAT;AACAD,MAAAA,QAAQ,CAACG,IAAT,CAAcJ,EAAd;AACD;AACF;;AACD,MAAIA,EAAE,CAACK,gBAAP,EAAyB;AACvBL,IAAAA,EAAE,CAACK,gBAAH,CAAoB,MAApB,EAA4BF,KAA5B;AACD;;AACD,MAAIH,EAAE,CAACM,WAAP,EAAoB;AAClBN,IAAAA,EAAE,CAACM,WAAH,CAAe,QAAf,EAAyBH,KAAzB;AACD;;AASD,MAAI,4BAA4BI,SAA5B,IAAyC,sBAAsBP,EAAnE,EAAuE;AACrEA,IAAAA,EAAE,CAACQ,gBAAH,CAAoBL,KAApB;AACD;AACF;AAED,eAAe,UAAUM,IAAV,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AAOxD,MAAMC,GAAG,GAAGC,MAAM,CAACC,QAAnB;AACA,MAAMf,EAAE,GAAGa,GAAG,CAACG,aAAJ,CAAkB,MAAlB,CAAX;AACA,MAAIC,GAAJ;;AACA,MAAIP,MAAJ,EAAY;AACVO,IAAAA,GAAG,GAAGP,MAAN;AACD,GAFD,MAEO;AACL,QAAMQ,IAAI,GAAG,CAACL,GAAG,CAACM,IAAJ,IAAYN,GAAG,CAACO,oBAAJ,CAAyB,MAAzB,EAAiC,CAAjC,CAAb,EAAkDC,UAA/D;AACAJ,IAAAA,GAAG,GAAGC,IAAI,CAACA,IAAI,CAACI,MAAL,GAAc,CAAf,CAAV;AACD;;AAED,MAAMC,MAAM,GAAGV,GAAG,CAACW,WAAnB;;AAEA,MAAIZ,UAAJ,EAAgB;AACd,SAAK,IAAMa,aAAX,IAA4Bb,UAA5B,EAAwC;AACtC,UAAIa,aAAa,IAAIb,UAArB,EAAiC;AAC/BZ,QAAAA,EAAE,CAAC0B,YAAH,CAAgBD,aAAhB,EAA+Bb,UAAU,CAACa,aAAD,CAAzC;AACD;AACF;AACF;;AACDzB,EAAAA,EAAE,CAAC2B,GAAH,GAAS,YAAT;AACA3B,EAAAA,EAAE,CAACS,IAAH,GAAUA,IAAV;AAEAT,EAAAA,EAAE,CAACW,KAAH,GAAW,QAAX;;AAGA,WAASiB,KAAT,CAAeC,EAAf,EAAmB;AACjB,QAAIhB,GAAG,CAACM,IAAR,EAAc;AACZ,aAAOU,EAAE,EAAT;AACD;;AACDC,IAAAA,UAAU,CAAC,YAAM;AACfF,MAAAA,KAAK,CAACC,EAAD,CAAL;AACD,KAFS,CAAV;AAGD;;AAIDD,EAAAA,KAAK,CAAC,YAAM;AACVX,IAAAA,GAAG,CAACc,UAAJ,CAAeC,YAAf,CAA4BhC,EAA5B,EAAgCU,MAAM,GAAGO,GAAH,GAASA,GAAG,CAACgB,WAAnD;AACD,GAFI,CAAL;;AAKA,WAASzB,gBAAT,CAA0BqB,EAA1B,EAA8B;AAC5B,QAAMK,YAAY,GAAGlC,EAAE,CAACS,IAAxB;AACA,QAAI0B,CAAC,GAAGZ,MAAM,CAACD,MAAf;;AACA,WAAOa,CAAC,EAAR,EAAY;AACV,UAAIZ,MAAM,CAACY,CAAD,CAAN,CAAU1B,IAAV,KAAmByB,YAAvB,EAAqC;AACnC,eAAOL,EAAE,EAAT;AACD;AACF;;AACDC,IAAAA,UAAU,CAAC,YAAM;AACftB,MAAAA,gBAAgB,CAACqB,EAAD,CAAhB;AACD,KAFS,CAAV;AAGD;;AAGC,WAASO,MAAT,GAAkB;AACd,QAAIpC,EAAE,CAACK,gBAAP,EAAyB;AACrBL,MAAAA,EAAE,CAACqC,mBAAH,CAAwB,MAAxB,EAAgCD,MAAhC;AACH;;AACDpC,IAAAA,EAAE,CAACW,KAAH,GAAWA,KAAK,IAAI,KAApB;AACH;;AAGD,MAAIX,EAAE,CAACK,gBAAP,EAAyB;AACrBL,IAAAA,EAAE,CAACK,gBAAH,CAAqB,MAArB,EAA6B+B,MAA7B;AACH;;AACDpC,EAAAA,EAAE,CAACQ,gBAAH,GAAsBA,gBAAtB;AACAA,EAAAA,gBAAgB,CAAE4B,MAAF,CAAhB;AACA,SAAOpC,EAAP;AACH","sourcesContent":["export function onloadCSS(ss, callback) {\n  let called;\n  function newcb() {\n    if (!called && callback) {\n      called = true;\n      callback.call(ss);\n    }\n  }\n  if (ss.addEventListener) {\n    ss.addEventListener('load', newcb);\n  }\n  if (ss.attachEvent) {\n    ss.attachEvent('onload', newcb);\n  }\n\n  // This code is for browsers that donâ€™t support onload\n  // No support for onload (it'll bind but never fire):\n  //\t* Android 4.3 (Samsung Galaxy S4, Browserstack)\n  //\t* Android 4.2 Browser (Samsung Galaxy SIII Mini GT-I8200L)\n  //\t* Android 2.3 (Pantech Burst P9070)\n\n  // Weak inference targets Android < 4.4\n  if ('isApplicationInstalled' in navigator && 'onloadcssdefined' in ss) {\n    ss.onloadcssdefined(newcb);\n  }\n}\n\nexport default function (href, before, media, attributes) {\n  // Arguments explained:\n  // `href` [REQUIRED] is the URL for your CSS file.\n  // `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n  // By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n  // `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n  // `attributes` [OPTIONAL] is the Object of attribute name/attribute value pairs to set on the stylesheet's DOM Element.\n  const doc = window.document;\n  const ss = doc.createElement('link');\n  let ref;\n  if (before) {\n    ref = before;\n  } else {\n    const refs = (doc.body || doc.getElementsByTagName('head')[0]).childNodes;\n    ref = refs[refs.length - 1];\n  }\n\n  const sheets = doc.styleSheets;\n  // Set any of the provided attributes to the stylesheet DOM Element.\n  if (attributes) {\n    for (const attributeName in attributes) {\n      if (attributeName in attributes) {\n        ss.setAttribute(attributeName, attributes[attributeName]);\n      }\n    }\n  }\n  ss.rel = 'stylesheet';\n  ss.href = href;\n  // temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n  ss.media = 'only x';\n\n  // wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n  function ready(cb) {\n    if (doc.body) {\n      return cb();\n    }\n    setTimeout(() => {\n      ready(cb);\n    });\n  }\n  // Inject link\n  // Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n  // Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n  ready(() => {\n    ref.parentNode.insertBefore(ss, before ? ref : ref.nextSibling);\n  });\n\n  // A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n  function onloadcssdefined(cb) {\n    const resolvedHref = ss.href;\n    let i = sheets.length;\n    while (i--) {\n      if (sheets[i].href === resolvedHref) {\n        return cb();\n      }\n    }\n    setTimeout(() => {\n      onloadcssdefined(cb);\n    });\n  }\n\n\n    function loadCB() {\n        if (ss.addEventListener) {\n            ss.removeEventListener( \"load\", loadCB );\n        }\n        ss.media = media || \"all\";\n    }\n\n    // once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n    if (ss.addEventListener) {\n        ss.addEventListener( \"load\", loadCB);\n    }\n    ss.onloadcssdefined = onloadcssdefined;\n    onloadcssdefined( loadCB );\n    return ss;\n}\n"]},"metadata":{},"sourceType":"module"}