{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { Polygon } from 'react-leaflet';\nimport createLogger from \"../utils/createLogger\";\nimport { transformProps } from \"./utils/transformProps\";\nvar logger = createLogger('Leaflet', 'Polygon');\n\nfunction localTransformProps(props) {\n  var strokeColor = props.strokeColor,\n      strokeColors = props.strokeColors;\n\n  if (Array.isArray(strokeColors) && strokeColor.length) {\n    logger.warn('`strokeColors` is not supported');\n  }\n\n  return transformProps(props);\n}\n\nvar ExpoPolygon = function (_React$Component) {\n  _inherits(ExpoPolygon, _React$Component);\n\n  var _super = _createSuper(ExpoPolygon);\n\n  function ExpoPolygon() {\n    _classCallCheck(this, ExpoPolygon);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExpoPolygon, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      this.ref.setStyleIfChanged(this.props, localTransformProps(props));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var props = localTransformProps(this.props);\n      return React.createElement(Polygon, _extends({\n        ref: function ref(_ref) {\n          return _this.ref = _ref;\n        }\n      }, props));\n    }\n  }]);\n\n  return ExpoPolygon;\n}(React.Component);\n\nexport { ExpoPolygon as default };","map":{"version":3,"sources":["/Users/kiraci/Desktop/improvement/petriam/frontend/petriam-frontend/node_modules/react-native-maps/lib/web/Leaflet/Polygon.js"],"names":["React","Polygon","createLogger","transformProps","logger","localTransformProps","props","strokeColor","strokeColors","Array","isArray","length","warn","ExpoPolygon","ref","setStyleIfChanged","Component"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,OAAOC,YAAP;AACA,SAASC,cAAT;AAEA,IAAMC,MAAM,GAAGF,YAAY,CAAC,SAAD,EAAY,SAAZ,CAA3B;;AAEA,SAASG,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,MAAQC,WAAR,GAAsCD,KAAtC,CAAQC,WAAR;AAAA,MAAqBC,YAArB,GAAsCF,KAAtC,CAAqBE,YAArB;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcF,YAAd,KAA+BD,WAAW,CAACI,MAA/C,EAAuD;AACrDP,IAAAA,MAAM,CAACQ,IAAP,CAAY,iCAAZ;AACD;;AAED,SAAOT,cAAc,CAACG,KAAD,CAArB;AACD;;IAEoBO,W;;;;;;;;;;;;;WACnB,wBAAeP,KAAf,EAAsB;AACpB,WAAKQ,GAAL,CAASC,iBAAT,CAA2B,KAAKT,KAAhC,EAAuCD,mBAAmB,CAACC,KAAD,CAA1D;AACD;;;WAED,kBAAS;AAAA;;AACP,UAAMA,KAAK,GAAGD,mBAAmB,CAAC,KAAKC,KAAN,CAAjC;AAEA,aAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAE,aAAAQ,IAAG;AAAA,iBAAK,KAAI,CAACA,GAAL,GAAWA,IAAhB;AAAA;AAAjB,SAA2CR,KAA3C,EAAP;AACD;;;;EATsCN,KAAK,CAACgB,S;;SAA1BH,W","sourcesContent":["import * as React from 'react';\nimport { Polygon } from 'react-leaflet';\n\nimport createLogger from '../utils/createLogger';\nimport { transformProps } from './utils/transformProps';\n\nconst logger = createLogger('Leaflet', 'Polygon');\n\nfunction localTransformProps(props) {\n  const { strokeColor, strokeColors } = props;\n  if (Array.isArray(strokeColors) && strokeColor.length) {\n    logger.warn('`strokeColors` is not supported');\n  }\n\n  return transformProps(props);\n}\n\nexport default class ExpoPolygon extends React.Component {\n  setNativeProps(props) {\n    this.ref.setStyleIfChanged(this.props, localTransformProps(props));\n  }\n\n  render() {\n    const props = localTransformProps(this.props);\n\n    return <Polygon ref={ref => (this.ref = ref)} {...props} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}